class: middle, center, inverse

## Coding style

#### 6.1 Casts

##### casts

```
As a general rule, C casts MUST NOT be used.
```

```
Rationale: good programming behavior includes proper type handling.
```

---
class: middle, center, inverse

## clang

* "compiler"

* open source

* C language family frontend for LLVM

* C / C++ / Objective C

---
class: middle, center, inverse

.llvm[![LLVM](sources/llvm.png)]

## LLVM

* collection of compiler technologies

* open source

* modular

* released as libraries + tools

---

## C source

##### cast.c - C

```c++
!INCLUDE "sources/cast.c.modified"
```

--

##### ./coding-style cast.c

```x86
42sh$ ./coding-style cast.c
cast.c:3:14: error: Explicit casts are forbidden.
* char *bp = (char *)n;
             ^~~~~~~~~
1 error generated.
Error while processing cast.c.
```

---

## How ?

Regex ? Handle all types ?

```
(\(int\|char\|float\|double\|unsigned\|long\))
```

--

Handle pointers ? Handle all styles ?

```
(int *)
(int*)
(int **)
(int**)
```

--

Typedefs ? Parse all the headers ?

```c
typedef int integer_t;

integer_t i = (integer_t)n;
```

---

And macros ?

```c
#define CAST(Var, Type) ((Type)(Var))

integer_t *i = CAST(n, integer_t *);
```

--

Use preprocessed file ?

```c
void *p = NULL;
```

--

expands to

```c
void *p = (void *)0;
```

---
class: middle, center, inverse

## What we need

* Type information.

* Macro expansion locations.

* The "compiler" already has it.

* The "frontend", specifically.

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified"
```

--

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified1"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified1"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified2"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified2"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified3"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified3"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified4"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified4"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified"
```

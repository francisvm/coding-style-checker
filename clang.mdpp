class: middle, center, inverse


## Coding style

#### 6.1 Casts

##### casts

```
As a general rule, C casts MUST NOT be used.
```

```
Rationale: good programming behavior includes proper type handling.
```

---
class: middle, center, inverse

## clang

* "compiler"

* open source

* C language family frontend for LLVM

* C / C++ / Objective C

---
class: middle, center, inverse

.llvm[![LLVM](sources/llvm.png)]

## LLVM

* collection of compiler technologies

* open source

* modular

* released as libraries + tools

---

## C source

##### cast.c - C

```c++
!INCLUDE "sources/cast.c.modified"
```

--

##### ./coding-style cast.c

```x86
42sh$ ./coding-style cast.c
cast.c:3:14: error: Explicit casts are forbidden.
* char *bp = (char *)n;
             ^~~~~~~~~
1 error generated.
Error while processing cast.c.
```

---

## How ?

Regex ? Handle all types ?

```
(\(int\|char\|float\|double\|unsigned\|long\))
```

--

Handle pointers ? Handle all styles ?

```
(int *)
(int*)
(int **)
(int**)
```

--

Typedefs ? Parse all the headers ?

```c
typedef int integer_t;

integer_t i = (integer_t)n;
```

---

And macros ?

```c
#define CAST(Var, Type) ((Type)(Var))

integer_t *i = CAST(n, integer_t *);
```

--

Use preprocessed file ?

```c
void *p = NULL;
```

--

expands to

```c
void *p = (void *)0;
```

---
class: middle, center, inverse

## What we need

* Type information.

* Macro expansion locations.

* The "compiler" already has it.

* The "frontend", specifically.

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified"
```

--

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified1"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified1"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified2"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified2"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified3"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified3"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified4"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified4"
```

---

## C source

##### cast.c

```c++
!INCLUDE "sources/cast.c.modified"
```

## clang AST

##### clang-check -ast-dump cast.c

```clangast
!INCLUDE "sources/cast.clang-check.modified"
```

---

## Match the AST

```c++
void matchNode(Expr *node) {
  if (isa<CStyleCastExpr>(node)) {
    // check if the expansion comes from system headers.
    // report error here.
  }
}
```

--

### More nodes

```c++
void matchNode(Stmt *node) {
  if (isa<AsmStmt>(node)) {
    // check if the expansion comes from system headers.
    // report error here.
  } else if (isa<GotoStmt>(node)) {
    // check if the expansion comes from system headers.
    // report error here.
  }
}
```

--

Basically, it sucks.

---

## AST Matchers

* Match every `CStyleCastExpr` unless it's coming from system headers.

--

```c++
auto CastMatcher = cStyleCastExpr(unless(isExpansionInSystemHeader()));
```

--

* Match all the `AsmStmt` unless they come from system headers.

--

```c++
auto AsmMatcher = asmStmt(unless(isExpansionInSystemHeader()));
```

--

* Match all the `GotoStmt` unless they come from system headers.

--

```c++
auto GotoMatcher = gotoStmt(unless(isExpansionInSystemHeader()));
```

--

```c++
MatchFinder Finder;
Finder.addMatcher(CastMatcher);
Finder.addMatcher(AsmMatcher);
Finder.addMatcher(GotoMatcher);
```

---
class: middle, center, inverse

## C++, my love

* We want maintainable and simple code.

* Even if the internals are ugly.

* We want custom error messages.

* We want custom rule names.

--

```
auto CastMatcher =
        Match<CStyleCastExpr>(cStyleCastExpr(unless(isExpansionInSystemHeader())),
                              "6.1.casts",
                              "Explicit casts are forbidden.");
```

---
class: middle, center, inverse

## More

* Many, many existing matchers.

```
asmStmt, cStyleCastExpr, functionDecl, parmVarDecl, isImplicit,
compoundStmt, whileStmt, forStmt, ifStmt, hasDescendant, hasType,
isEnum, variableArrayType, etc.
```

* Create your own matcher.

* Contribute it to `clang`'s library.

---

Example

```c++
#define LINE(X) (SM.getPresumedLoc((X)).getLine())

AST_MATCHER(Stmt, expandsOnMultipleLines) {
  auto &SM = Finder->getASTContext().getSourceManager();
  return LINE(Node.getLocStart()) != LINE(Node.getLocEnd());
}
```

--

Usage

```c++
auto matcher = returnStmt(expandsOnMultipleLines());
```

--

Matches

```c++
int foo(int i) {
  if (i < 2)
    return 1;
  else
*   return 1
*     + 2;
}
```
